import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump Umbra 1.0 ./Umbra'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Circle"
        prototype: "Fixture"
        exports: ["CircleFixture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "radius"; type: "double" }
    }
    Component {
        name: "DistanceJoint"
        prototype: "Joint"
        exports: ["DistanceJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "distance"; type: "double" }
        Property { name: "collideConnected"; type: "bool" }
        Property { name: "frequency"; type: "double" }
        Property { name: "dampingRatio"; type: "double" }
        Property { name: "joiningPointA"; type: "QVector2D" }
        Property { name: "joiningPointB"; type: "QVector2D" }
        Method {
            name: "setDistance"
            Parameter { name: "distance"; type: "double" }
        }
        Method {
            name: "setCollideConnect"
            Parameter { name: "collideConnected"; type: "bool" }
        }
        Method {
            name: "setFrequency"
            Parameter { name: "frequency"; type: "double" }
        }
        Method {
            name: "setDampingRatio"
            Parameter { name: "dampingRatio"; type: "double" }
        }
        Method {
            name: "setJoiningPointA"
            Parameter { name: "joiningPointA"; type: "QVector2D" }
        }
        Method {
            name: "setJoiningPointB"
            Parameter { name: "joiningPointB"; type: "QVector2D" }
        }
    }
    Component {
        name: "Engine"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Game 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fps"; type: "int" }
        Property { name: "currentScene"; type: "uint" }
        Method {
            name: "isPressed"
            type: "bool"
            Parameter { name: "key"; type: "int" }
        }
        Method { name: "getMousePos"; type: "QPoint" }
        Method { name: "isLeftMouseButtonPressed"; type: "bool" }
        Method { name: "isRightMouseButtonPressed"; type: "bool" }
        Method { name: "isMiddleMouseButtonPressed"; type: "bool" }
        Method { name: "getMouseDelta"; type: "double" }
    }
    Component {
        name: "Entity"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Entity 1.0"]
        exportMetaObjectRevisions: [0]
        Signal { name: "outOfScreen" }
        Method { name: "getID"; type: "ulong" }
        Method { name: "getDelta"; type: "double" }
    }
    Component {
        name: "Fixture"
        prototype: "QObject"
        Property { name: "friction"; type: "double" }
        Property { name: "density"; type: "double" }
        Property { name: "restitution"; type: "double" }
        Property { name: "isSensor"; type: "bool" }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "angle"; type: "double" }
        Signal { name: "scaleChanged" }
        Signal { name: "sensorChanged" }
    }
    Component {
        name: "Fixtures"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Fixtures 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "FrictionJoint"
        prototype: "Joint"
        exports: ["FrictionJoint 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Joint"
        prototype: "QObject"
        Property { name: "bodyA"; type: "PhysicEntity"; isPointer: true }
        Property { name: "bodyB"; type: "PhysicEntity"; isPointer: true }
        Property { name: "pointA"; type: "QPoint" }
        Property { name: "pointB"; type: "QPoint" }
        Property { name: "angle"; type: "double"; isReadonly: true }
        Property { name: "speed"; type: "double"; isReadonly: true }
        Property { name: "torque"; type: "double"; isReadonly: true }
        Signal {
            name: "bodyAChanged"
            Parameter { name: "bodyA"; type: "PhysicEntity"; isPointer: true }
        }
        Signal {
            name: "bodyBChanged"
            Parameter { name: "bodyB"; type: "PhysicEntity"; isPointer: true }
        }
        Signal {
            name: "pointAChanged"
            Parameter { name: "pointA"; type: "QPoint" }
        }
        Signal {
            name: "pointBChanged"
            Parameter { name: "pointB"; type: "QPoint" }
        }
        Method {
            name: "setBodyA"
            Parameter { name: "bodyA"; type: "PhysicEntity"; isPointer: true }
        }
        Method {
            name: "setBodyB"
            Parameter { name: "bodyB"; type: "PhysicEntity"; isPointer: true }
        }
        Method {
            name: "setPointA"
            Parameter { name: "pointA"; type: "QPoint" }
        }
        Method {
            name: "setPointB"
            Parameter { name: "pointB"; type: "QPoint" }
        }
    }
    Component {
        name: "Layer"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["Layer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "depth"; type: "double" }
        Property { name: "gravitationX"; type: "double" }
        Property { name: "gravitationY"; type: "double" }
        Property { name: "maximumParticleCount"; type: "int" }
        Method {
            name: "setMaximumParticleCount"
            Parameter { name: "maximumParticleCount"; type: "int" }
        }
        Method {
            name: "raycast"
            type: "QPointF"
            Parameter { name: "start"; type: "QPointF" }
            Parameter { name: "end"; type: "QPointF" }
        }
        Method { name: "pause" }
        Method { name: "unPause" }
        Method {
            name: "createParticleBox"
            Parameter { name: "box"; type: "QRect" }
            Parameter { name: "definition"; type: "ParticleDefinition"; isPointer: true }
        }
    }
    Component {
        name: "ParticleDefinition"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["ParticleDefinition 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "flags"; type: "ParticleFlag"; isList: true; isReadonly: true }
        Property { name: "lifetime"; type: "double" }
        Method {
            name: "setLifetime"
            Parameter { name: "lifetime"; type: "double" }
        }
    }
    Component {
        name: "ParticleFlag"
        prototype: "QObject"
        exports: ["ParticleFlag 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ParticleType"
            values: {
                "SOLID": 1,
                "RIGID": 2,
                "ELASTIC": 16,
                "POWDER": 64,
                "SPRING": 8,
                "TENSILE": 128,
                "VISCOUS": 32,
                "STATIC_PRESSURE": 2048,
                "WALL": 4,
                "BARRIER": 1024,
                "ZOMBIE": 2,
                "COLOR_MIXING": 256
            }
        }
        Property { name: "flag"; type: "ParticleType" }
        Method {
            name: "setFlag"
            Parameter { name: "flag"; type: "ParticleType" }
        }
    }
    Component {
        name: "PhysicEntity"
        defaultProperty: "data"
        prototype: "Entity"
        exports: ["PhysicEntity 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BodyType"
            values: {
                "STATIC": 0,
                "DYNAMIC": 2,
                "KINEMATIC": 1
            }
        }
        Property { name: "fixtures"; type: "Fixtures"; isPointer: true }
        Property { name: "bodyType"; type: "BodyType" }
        Property { name: "isBullet"; type: "bool" }
        Signal {
            name: "sensorContactStart"
            Parameter { name: "entity"; type: "PhysicEntity"; isPointer: true }
        }
        Signal {
            name: "sensorContactEnd"
            Parameter { name: "entity"; type: "PhysicEntity"; isPointer: true }
        }
        Method { name: "getMass"; type: "double" }
        Method {
            name: "setAngularVelocity"
            Parameter { name: "n"; type: "double" }
        }
        Method {
            name: "applyAngularImpulse"
            Parameter { name: "impulse"; type: "double" }
        }
        Method {
            name: "applyTorque"
            Parameter { name: "torque"; type: "double" }
        }
        Method {
            name: "applyForce"
            Parameter { name: "forceVec"; type: "QVector2D" }
        }
        Method {
            name: "applyImpulse"
            Parameter { name: "forceVec"; type: "QVector2D" }
        }
        Method {
            name: "setLinearVelocity"
            Parameter { name: "forceVec"; type: "QVector2D" }
        }
    }
    Component {
        name: "Polygon"
        prototype: "Fixture"
        exports: ["PolygonFixture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "points"; type: "QVariantList" }
        Method {
            name: "setPoints"
            Parameter { name: "points"; type: "QVariantList" }
        }
    }
    Component {
        name: "Prectangle"
        prototype: "Fixture"
        exports: ["RectangleFixture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Signal { name: "scaleChanged" }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "width"; type: "double" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "height"; type: "double" }
        }
    }
    Component {
        name: "PrismaticJoint"
        prototype: "Joint"
        exports: ["PrismaticJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "axis"; type: "QVector2D" }
        Method {
            name: "setAxis"
            Parameter { name: "axis"; type: "QVector2D" }
        }
    }
    Component {
        name: "PulleyJoint"
        prototype: "Joint"
        exports: ["PulleyJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "groundA"; type: "QVector2D" }
        Property { name: "groundB"; type: "QVector2D" }
        Property { name: "ratio"; type: "double" }
        Method {
            name: "setGroundA"
            Parameter { name: "groundA"; type: "QVector2D" }
        }
        Method {
            name: "setGroundB"
            Parameter { name: "groundB"; type: "QVector2D" }
        }
        Method {
            name: "setRatio"
            Parameter { name: "ratio"; type: "double" }
        }
    }
    Component {
        name: "RevoluteJoint"
        prototype: "Joint"
        exports: ["RevoluteJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "setMotorSpeed"
            Parameter { name: "speed"; type: "double" }
        }
    }
    Component {
        name: "Scene"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Scene 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "maxDepth"; type: "double" }
        Property { name: "offsetX"; type: "double" }
        Property { name: "offsetY"; type: "double" }
    }
    Component {
        name: "WheelJoint"
        prototype: "Joint"
        exports: ["WheelJoint 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "axis"; type: "QVector2D" }
        Method {
            name: "setAxis"
            Parameter { name: "axis"; type: "QVector2D" }
        }
    }
}
